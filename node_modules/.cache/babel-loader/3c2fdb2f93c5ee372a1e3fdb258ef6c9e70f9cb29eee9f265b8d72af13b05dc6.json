{"ast":null,"code":"var _jsxFileName = \"/Users/murzik/Desktop/React learning/torsunov/src/context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\nfunction Provider({\n  children\n}) {\n  _s();\n  const [zoomFragment, setZoomFragment] = useState([0, 100]);\n  const [audioDuration, setAudioDuration] = useState(0);\n  const [playing, setPlaying] = useState(false);\n  const [playbacktime, setPlaybacktime] = useState(0);\n  const [activeSegmentLength, setActiveSegmentLength] = useState(10);\n  //The length of the active segment in PERCENTAGE of the total audio length\n\n  // const [mediaId, setMediaId] = useState('829086844a3211eea42102420a000003');\n  // const [mediaId, setMediaId] = useState('9020231925e711eebf6302420a000003');\n  const [mediaId, setMediaId] = useState();\n  const [mp3, setMp3] = useState(null);\n  const [name, setName] = useState('');\n  const [lang, setLang] = useState('');\n  const [translationData, setTranslationData] = useState([]);\n  const fetchMp3 = mediaId => {\n    setMp3(null);\n    fetch(`https://flask.dev.transcribe.torsunov.ru/download_rus?file_name=${mediaId}/audio.mp3`).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.blob();\n    }).then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      setMp3(url); // Store the object URL\n    }).catch(error => {\n      console.error(\"Error fetching MP3: \", error);\n    });\n  };\n  useEffect(() => {\n    const audio = new Audio(mp3);\n    audio.onloadedmetadata = () => {\n      setAudioDuration(audio.duration * 1000); // duration is in seconds, so multiply by 1000 to get milliseconds\n    };\n  }, [mp3]);\n  const fetchTracks = mediaId => {\n    setTranslationData([]);\n    fetch(`https://flask.dev.transcribe.torsunov.ru/get_all_data_for_editing?media=${mediaId}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      if (Array.isArray(data)) {\n        setTranslationData(data.flat());\n      }\n    }).catch(error => {\n      console.error(\"Error fetching data: \", error);\n    });\n  };\n  useEffect(() => {\n    if (mediaId) {\n      setAudioDuration(0);\n      setPlaybacktime(0);\n      setPlaying(false);\n      fetchMp3(mediaId);\n      fetchTracks(mediaId);\n    }\n  }, [mediaId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: {\n        state: {\n          zoomFragment,\n          audioDuration,\n          playing,\n          playbacktime,\n          activeSegmentLength,\n          mediaId,\n          mp3,\n          translationData,\n          name,\n          lang\n        },\n        handles: {\n          setZoomFragment,\n          setAudioDuration,\n          setPlaying,\n          setPlaybacktime,\n          setActiveSegmentLength,\n          setMediaId,\n          setMp3,\n          setTranslationData,\n          setName,\n          setLang\n        }\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Provider, \"1A2B9Ly2AHJK+9BuVwiBrcXa5TE=\");\n_c = Provider;\nconst Consumer = Context.Consumer;\nexport { Context, Provider, Consumer };\nvar _c;\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Context","createContext","Provider","children","_s","zoomFragment","setZoomFragment","audioDuration","setAudioDuration","playing","setPlaying","playbacktime","setPlaybacktime","activeSegmentLength","setActiveSegmentLength","mediaId","setMediaId","mp3","setMp3","name","setName","lang","setLang","translationData","setTranslationData","fetchMp3","fetch","then","response","ok","Error","blob","url","window","URL","createObjectURL","catch","error","console","audio","Audio","onloadedmetadata","duration","fetchTracks","json","data","Array","isArray","flat","value","state","handles","fileName","_jsxFileName","lineNumber","columnNumber","_c","Consumer","$RefreshReg$"],"sources":["/Users/murzik/Desktop/React learning/torsunov/src/context.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst Context = React.createContext();\n\n\nfunction Provider({ children }) {\n\n\n\n  const [zoomFragment, setZoomFragment] = useState([0, 100])\n\n  const [audioDuration, setAudioDuration] = useState(0)\n\n  const [playing, setPlaying] = useState(false);\n\n  const [playbacktime, setPlaybacktime] = useState(0);\n\n  const [activeSegmentLength, setActiveSegmentLength] = useState(10);\n  //The length of the active segment in PERCENTAGE of the total audio length\n\n\n  // const [mediaId, setMediaId] = useState('829086844a3211eea42102420a000003');\n  // const [mediaId, setMediaId] = useState('9020231925e711eebf6302420a000003');\n  const [mediaId, setMediaId] = useState();\n\n  const [mp3, setMp3] = useState(null);\n\n  const [name, setName] = useState('');\n  const [lang, setLang] = useState('');\n\n  const [translationData, setTranslationData] = useState([]);\n\n\n\n\n\n\n  const fetchMp3 = (mediaId) => {\n    setMp3(null)\n    fetch(`https://flask.dev.transcribe.torsunov.ru/download_rus?file_name=${mediaId}/audio.mp3`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.blob();\n      })\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        setMp3(url);  // Store the object URL\n      })\n      .catch(error => {\n        console.error(\"Error fetching MP3: \", error);\n      });\n  }\n\n  useEffect(() => {\n    const audio = new Audio(mp3);\n    audio.onloadedmetadata = () => {\n      setAudioDuration(audio.duration * 1000); // duration is in seconds, so multiply by 1000 to get milliseconds\n    };\n  }, [mp3]);\n\n\n  const fetchTracks = (mediaId) => {\n    setTranslationData([])\n    fetch(`https://flask.dev.transcribe.torsunov.ru/get_all_data_for_editing?media=${mediaId}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        if (Array.isArray(data)) {\n          setTranslationData(data.flat());\n        }\n      })\n      .catch(error => {\n        console.error(\"Error fetching data: \", error);\n      });\n  }\n\n\n  useEffect(() => {\n    if (mediaId) {\n      setAudioDuration(0)\n      setPlaybacktime(0)\n      setPlaying(false)\n      fetchMp3(mediaId)\n      fetchTracks(mediaId)\n    }\n  }, [mediaId])\n\n\n\n\n  return (<>\n    <Context.Provider\n      value={{\n        state: {\n          zoomFragment,\n          audioDuration,\n          playing,\n          playbacktime,\n          activeSegmentLength,\n          mediaId,\n          mp3,\n          translationData,\n          name,\n          lang,\n        },\n        handles: {\n          setZoomFragment,\n          setAudioDuration,\n          setPlaying,\n          setPlaybacktime,\n          setActiveSegmentLength,\n          setMediaId,\n          setMp3,\n          setTranslationData,\n          setName,\n          setLang\n        },\n      }}\n    >\n      {children}\n    </Context.Provider>\n  </>\n  )\n\n}\n\nconst Consumer = Context.Consumer;\n\nexport { Context, Provider, Consumer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}