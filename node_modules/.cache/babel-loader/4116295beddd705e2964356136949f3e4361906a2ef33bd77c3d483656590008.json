{"ast":null,"code":"var _jsxFileName = \"/Users/murzik/Desktop/React learning/torsunov/src/components/PlayerMain.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useContext, useEffect, useRef } from 'react';\nimport ReactWaves, { Regions } from '@dschoon/react-waves';\nimport { Context } from '../context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PlayerMain({\n  mp3\n}) {\n  _s();\n  const wavesContainerRef = useRef(null);\n  const context = useContext(Context);\n  const [wavesurfer, setWavesurfer] = useState(null);\n  // const [playing, setPlaying] = useState(false);\n  const [pos, setPos] = useState(0);\n  const onLoading = useCallback(({\n    wavesurfer\n  }) => {\n    setWavesurfer(wavesurfer);\n    const duration = wavesurfer.getDuration(); // in seconds\n\n    // Extract zoom fragment from context\n    const [startTime, endTime] = context.state['zoomFragment'].map(time => time / 1000); // Convert to seconds\n    const fragmentDuration = endTime - startTime;\n    if (duration > 0 && fragmentDuration > 0) {\n      const containerWidth = wavesContainerRef.current ? wavesContainerRef.current.offsetWidth : 0;\n      const pixelsPerSecondForFragment = containerWidth / fragmentDuration;\n      wavesurfer.zoom(pixelsPerSecondForFragment);\n      wavesurfer.seekTo(startTime / duration);\n    }\n  }, [wavesContainerRef, context.state['zoomFragment']]);\n  const onPosChange = useCallback((newPos, wavesurfer) => {\n    if (newPos !== pos) {\n      setPos(newPos);\n    }\n  }, [pos]);\n  useEffect(() => {\n    if (wavesurfer) {\n      const duration = wavesurfer.getDuration(); // in seconds\n      const [startTime, endTime] = context.state['zoomFragment'].map(time => time / 1000); // Convert to seconds\n      const fragmentDuration = endTime - startTime;\n      if (duration > 0 && fragmentDuration > 0) {\n        const containerWidth = wavesContainerRef.current ? wavesContainerRef.current.offsetWidth : 0;\n        const pixelsPerSecondForFragment = containerWidth / fragmentDuration;\n        wavesurfer.zoom(pixelsPerSecondForFragment);\n\n        // Adjusting starting position\n        const zoomStartInSeconds = startTime;\n        const relativePosition = zoomStartInSeconds / duration;\n        if (relativePosition >= 0 && relativePosition <= 1) {\n          wavesurfer.seekTo(relativePosition);\n        }\n\n        // Adjusting scroll position\n        if (wavesContainerRef.current) {\n          const totalWaveformWidth = wavesContainerRef.current.scrollWidth;\n          const newScrollPosition = totalWaveformWidth * relativePosition;\n          wavesContainerRef.current.scrollLeft = newScrollPosition;\n        }\n      }\n\n      // wavesurfer.on('audioprocess', (time) => {\n      //   context.handles.setPlaybackTime(time);\n      // });\n    }\n  }, [wavesurfer, context.state['zoomFragment'], context.state['audioDuration']]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"x_player0 x_player0--100\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"x_player\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        ref: wavesContainerRef,\n        style: {\n          width: '100%',\n          overflowX: 'auto',\n          overflowY: 'hidden',\n          whiteSpace: 'nowrap'\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactWaves, {\n          audioFile: context.state['mp3'],\n          className: 'react-waves',\n          options: {\n            barGap: 3,\n            barWidth: 4,\n            barHeight: 2,\n            barRadius: 3,\n            cursorWidth: 0,\n            height: 100,\n            hideScrollbar: true,\n            progressColor: '#ff7606',\n            responsive: true,\n            waveColor: '#D1D6DA'\n          },\n          volume: 0.5,\n          pos: pos,\n          playing: context['state']['playing'],\n          onPosChange: onPosChange,\n          onLoading: onLoading,\n          children: /*#__PURE__*/_jsxDEV(Regions, {\n            regions: {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(PlayerMain, \"RShPZibym8rTTMCaHlFWn1D/rWg=\");\n_c = PlayerMain;\nvar _c;\n$RefreshReg$(_c, \"PlayerMain\");","map":{"version":3,"names":["React","useState","useCallback","useContext","useEffect","useRef","ReactWaves","Regions","Context","jsxDEV","_jsxDEV","PlayerMain","mp3","_s","wavesContainerRef","context","wavesurfer","setWavesurfer","pos","setPos","onLoading","duration","getDuration","startTime","endTime","state","map","time","fragmentDuration","containerWidth","current","offsetWidth","pixelsPerSecondForFragment","zoom","seekTo","onPosChange","newPos","zoomStartInSeconds","relativePosition","totalWaveformWidth","scrollWidth","newScrollPosition","scrollLeft","className","children","ref","style","width","overflowX","overflowY","whiteSpace","audioFile","options","barGap","barWidth","barHeight","barRadius","cursorWidth","height","hideScrollbar","progressColor","responsive","waveColor","volume","playing","regions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/murzik/Desktop/React learning/torsunov/src/components/PlayerMain.js"],"sourcesContent":["import React, { useState, useCallback, useContext, useEffect, useRef } from 'react';\nimport ReactWaves, { Regions } from '@dschoon/react-waves';\nimport { Context } from '../context';\n\nexport function PlayerMain({ mp3 }) {\n  const wavesContainerRef = useRef(null);\n  const context = useContext(Context);\n\n  const [wavesurfer, setWavesurfer] = useState(null);\n  // const [playing, setPlaying] = useState(false);\n  const [pos, setPos] = useState(0);\n\n  const onLoading = useCallback(({ wavesurfer }) => {\n    setWavesurfer(wavesurfer);\n    const duration = wavesurfer.getDuration(); // in seconds\n\n    // Extract zoom fragment from context\n    const [startTime, endTime] = context.state['zoomFragment'].map(time => time / 1000); // Convert to seconds\n    const fragmentDuration = endTime - startTime;\n\n    if (duration > 0 && fragmentDuration > 0) {\n      const containerWidth = wavesContainerRef.current ? wavesContainerRef.current.offsetWidth : 0;\n      const pixelsPerSecondForFragment = containerWidth / fragmentDuration;\n      wavesurfer.zoom(pixelsPerSecondForFragment);\n      wavesurfer.seekTo(startTime / duration);\n    }\n  }, [wavesContainerRef, context.state['zoomFragment']]);\n\n  const onPosChange = useCallback((newPos, wavesurfer) => {\n    if (newPos !== pos) {\n      setPos(newPos);\n    }\n  }, [pos]);\n\n\n  useEffect(() => {\n    if (wavesurfer) {\n      const duration = wavesurfer.getDuration(); // in seconds\n      const [startTime, endTime] = context.state['zoomFragment'].map(time => time / 1000); // Convert to seconds\n      const fragmentDuration = endTime - startTime;\n\n      if (duration > 0 && fragmentDuration > 0) {\n        const containerWidth = wavesContainerRef.current ? wavesContainerRef.current.offsetWidth : 0;\n        const pixelsPerSecondForFragment = containerWidth / fragmentDuration;\n        wavesurfer.zoom(pixelsPerSecondForFragment);\n\n        // Adjusting starting position\n        const zoomStartInSeconds = startTime;\n        const relativePosition = zoomStartInSeconds / duration;\n        if (relativePosition >= 0 && relativePosition <= 1) {\n          wavesurfer.seekTo(relativePosition);\n        }\n\n        // Adjusting scroll position\n        if (wavesContainerRef.current) {\n          const totalWaveformWidth = wavesContainerRef.current.scrollWidth;\n          const newScrollPosition = totalWaveformWidth * relativePosition;\n          wavesContainerRef.current.scrollLeft = newScrollPosition;\n        }\n      }\n\n      // wavesurfer.on('audioprocess', (time) => {\n      //   context.handles.setPlaybackTime(time);\n      // });\n\n    }\n  }, [wavesurfer, context.state['zoomFragment'], context.state['audioDuration']]);\n\n\n\n  return (\n    <div className=\"x_player0 x_player0--100\">\n      <div className='x_player'>\n\n        {/* <div className=\"x_player_control\">\n          <div className=\"x_player_control_play\" onClick={() => setPlaying(!playing)}>\n            {playing\n              ? <div className=\"ico ico--40\"><div>pause</div></div>\n              : <div className=\"ico ico--40\"><div>play_arrow</div></div>}\n          </div>\n        </div> */}\n\n        <div className=\"\" ref={wavesContainerRef}\n          style={{\n            width: '100%',\n            overflowX: 'auto',\n            overflowY: 'hidden',\n            whiteSpace: 'nowrap'\n          }}\n        >\n          <ReactWaves\n            audioFile={context.state['mp3']}\n            className={'react-waves'}\n            options={{\n              barGap: 3,\n              barWidth: 4,\n              barHeight: 2,\n              barRadius: 3,\n              cursorWidth: 0,\n              height: 100,\n              hideScrollbar: true,\n              progressColor: '#ff7606',\n              responsive: true,\n              waveColor: '#D1D6DA',\n            }}\n            volume={0.5}\n            pos={pos}\n            playing={context['state']['playing']}\n            onPosChange={onPosChange}\n            onLoading={onLoading}\n          >\n            <Regions\n              regions={{}}\n            />\n          </ReactWaves>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}