{"ast":null,"code":"var _jsxFileName = \"/Users/murzik/Desktop/React learning/torsunov/src/components/PlayerScrubbr.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { Context } from '../context';\nimport { PlayerChapters } from './PlayerChapters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayerScrubbr() {\n  _s();\n  const context = useContext(Context);\n  const [x, setX] = useState(0);\n  const [dragging, setDragging] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const scrubberRef = useRef(null);\n  const handleMouseDown = event => {\n    setDragging(true);\n    setStartX(event.clientX);\n  };\n  const handleMouseMove = event => {\n    if (!dragging) return;\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const segmentDurationInMs = context.state['audioDuration'] * context.state['activeSegmentLength'] / 100;\n      const width = scrubberTotalWidth * segmentDurationInMs / context.state['audioDuration'];\n      const deltaX = event.clientX - startX;\n      let newX = x + deltaX;\n      if (newX < 0) newX = 0;\n      if (newX + width > scrubberTotalWidth) newX = scrubberTotalWidth - width;\n      setX(newX);\n      setStartX(event.clientX);\n    }\n  };\n  const handleMouseUp = () => {\n    setDragging(false);\n  };\n  useEffect(() => {\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n  useEffect(() => {\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const positionRatio = context.state['zoomFragment'][0] / context.state['audioDuration'];\n      const newStartX = positionRatio * scrubberTotalWidth;\n      setX(newStartX);\n      setStartX(newStartX);\n    }\n  }, [context.state['zoomFragment']]);\n  useEffect(() => {\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const segmentDurationInMs = context.state['audioDuration'] * context.state['activeSegmentLength'] / 100;\n      const width = scrubberTotalWidth * segmentDurationInMs / context.state['audioDuration'];\n      const positionRatio = x / scrubberTotalWidth;\n      const startTimeInMs = positionRatio * context.state['audioDuration'];\n      const widthRatio = width / scrubberTotalWidth;\n      const scrubberDurationInMs = widthRatio * context.state['audioDuration'];\n      const endTimeInMs = startTimeInMs + scrubberDurationInMs;\n      if (context.state['zoomFragment'][0] !== startTimeInMs) {\n        context.handles['setZoomFragment']([Math.round(startTimeInMs), Math.round(endTimeInMs)]);\n      }\n    }\n  }, [x, context.state['activeSegmentLength'], context.state['audioDuration']]);\n  function msToTime(duration) {\n    let seconds = Math.floor(duration / 1000 % 60),\n      minutes = Math.floor(duration / (1000 * 60) % 60),\n      hours = Math.floor(duration / (1000 * 60 * 60) % 24);\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return `${hours}h ${minutes}m ${seconds}s`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"x_player_timeline_scrubber\",\n    ref: scrubberRef,\n    children: [/*#__PURE__*/_jsxDEV(PlayerChapters, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"x_player_timeline_select0\",\n      onMouseDown: handleMouseDown,\n      style: {\n        top: '0.8em',\n        left: x,\n        width: `${context.state['activeSegmentLength']}%`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"x_player_timeline_select\",\n        style: {\n          width: `100%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"x_player_timeline_select_time\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: msToTime(context.state['zoomFragment'][0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u2013\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: msToTime(context.state['zoomFragment'][1])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(PlayerScrubbr, \"dmhv7mrHQLwKNBOCj6eKFmfGoH0=\");\n_c = PlayerScrubbr;\nvar _c;\n$RefreshReg$(_c, \"PlayerScrubbr\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useRef","Context","PlayerChapters","jsxDEV","_jsxDEV","PlayerScrubbr","_s","context","x","setX","dragging","setDragging","startX","setStartX","scrubberRef","handleMouseDown","event","clientX","handleMouseMove","current","state","scrubberTotalWidth","offsetWidth","segmentDurationInMs","width","deltaX","newX","handleMouseUp","window","addEventListener","removeEventListener","positionRatio","newStartX","startTimeInMs","widthRatio","scrubberDurationInMs","endTimeInMs","handles","Math","round","msToTime","duration","seconds","floor","minutes","hours","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","style","top","left","_c","$RefreshReg$"],"sources":["/Users/murzik/Desktop/React learning/torsunov/src/components/PlayerScrubbr.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\nimport { Context } from '../context';\nimport { PlayerChapters } from './PlayerChapters';\n\nexport default function PlayerScrubbr() {\n  const context = useContext(Context);\n  const [x, setX] = useState(0);\n  const [dragging, setDragging] = useState(false);\n  const [startX, setStartX] = useState(0);\n\n  const scrubberRef = useRef(null);\n\n  const handleMouseDown = (event) => {\n    setDragging(true);\n    setStartX(event.clientX);\n  };\n\n  const handleMouseMove = (event) => {\n    if (!dragging) return;\n\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const segmentDurationInMs = (context.state['audioDuration'] * context.state['activeSegmentLength']) / 100;\n      const width = (scrubberTotalWidth * segmentDurationInMs) / context.state['audioDuration'];\n\n      const deltaX = event.clientX - startX;\n      let newX = x + deltaX;\n\n      if (newX < 0) newX = 0;\n      if (newX + width > scrubberTotalWidth) newX = scrubberTotalWidth - width;\n      setX(newX);\n      setStartX(event.clientX);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setDragging(false);\n  };\n\n  useEffect(() => {\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n\n\n  useEffect(() => {\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const positionRatio = context.state['zoomFragment'][0] / context.state['audioDuration'];\n      const newStartX = positionRatio * scrubberTotalWidth;\n      setX(newStartX);\n      setStartX(newStartX);\n    }\n  }, [context.state['zoomFragment']]);\n\n  useEffect(() => {\n    if (scrubberRef.current && context.state['audioDuration']) {\n      const scrubberTotalWidth = scrubberRef.current.offsetWidth;\n      const segmentDurationInMs = (context.state['audioDuration'] * context.state['activeSegmentLength']) / 100;\n      const width = (scrubberTotalWidth * segmentDurationInMs) / context.state['audioDuration'];\n\n      const positionRatio = x / scrubberTotalWidth;\n      const startTimeInMs = positionRatio * context.state['audioDuration'];\n\n      const widthRatio = width / scrubberTotalWidth;\n      const scrubberDurationInMs = widthRatio * context.state['audioDuration'];\n      const endTimeInMs = startTimeInMs + scrubberDurationInMs;\n\n      if (context.state['zoomFragment'][0] !== startTimeInMs) {\n        context.handles['setZoomFragment']([Math.round(startTimeInMs), Math.round(endTimeInMs)]);\n      }\n    }\n  }, [x, context.state['activeSegmentLength'], context.state['audioDuration']]);\n\n  function msToTime(duration) {\n    let seconds = Math.floor((duration / 1000) % 60),\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return `${hours}h ${minutes}m ${seconds}s`;\n  }\n\n  return (\n    <div className=\"x_player_timeline_scrubber\" ref={scrubberRef}>\n\n      <PlayerChapters />\n\n      <div className=\"x_player_timeline_select0\" onMouseDown={handleMouseDown} style={{ top: '0.8em', left: x, width: `${context.state['activeSegmentLength']}%` }}>\n        <div className=\"x_player_timeline_select\" style={{ width: `100%` }}></div>\n        <div className=\"x_player_timeline_select_time\">\n          <div>{msToTime(context.state['zoomFragment'][0])}</div>\n          <div>–</div>\n          <div>{msToTime(context.state['zoomFragment'][1])}</div>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}